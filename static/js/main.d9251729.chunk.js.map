{"version":3,"sources":["App.js","index.js"],"names":["App","inputRef","useRef","progress","setProgress","useState","files","setFiles","throttledZipUpdate","throttle","metadata","percent","console","log","toFixed","currentFile","className","ref","type","webkitdirectory","length","onClick","zip","JSZip","Array","from","current","forEach","file","webkitRelativePath","generateAsync","then","content","saveAs","FormData","append","catch","e","max","value","map","key","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"mOAKe,SAASA,IACtB,MAAMC,EAAWC,iBAAO,OACjBC,EAAUC,GAAeC,oBAAU,IACnCC,EAAOC,GAAYF,mBAAS,IAS7BG,EAAqBC,IAPNC,IACnBN,EAAYM,EAASC,SACrBC,QAAQC,IAAI,gBAAkBH,EAASC,QAAQG,QAAQ,GAAK,MACxDJ,EAASK,aACXH,QAAQC,IAAI,kBAAoBH,EAASK,cAGI,IAoBjD,OACE,yBAAKC,UAAU,OACb,6CACA,qEACA,2BAAOC,IAAKhB,EAAUiB,KAAK,OAAOC,gBAAgB,SACjDb,EAAMc,QACL,6BACE,6BACE,4BAAQC,QA1BJ,KACZ,MAAMC,EAAM,IAAIC,IACFC,MAAMC,KAAKxB,EAASyB,QAAQpB,OAEpCqB,QAASC,IACbN,EAAIM,KAAKA,EAAKC,mBAAoBD,KAEpCN,EACGQ,cAAc,CAAEZ,KAAM,QAAUV,GAChCuB,MAAK,SAAUC,GACdC,iBAAOD,EAAS,cAEC,IAAIE,UACZC,OAAO,YAAaH,GAC7BpB,QAAQC,IAAI,0BAA2BmB,MAExCI,MAAOC,GAAMzB,QAAQC,IAAIwB,MAUpB,OAA6B/B,EAAMc,OAAnC,WAEF,8BAAUkB,IAAI,MAAMC,MAAOpC,GAA3B,OACGA,QADH,IACGA,OADH,EACGA,EAAUW,QAAQ,GADrB,IAC0B,KAE1B,8CACCR,EAAMkC,IAAKZ,GACV,yBAAKa,IAAKb,EAAKC,oBAAqBD,EAAKC,uBC/CrD,MAAMa,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC/C,EAAD,OAEF0C,I","file":"static/js/main.d9251729.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport JSZip from \"jszip\";\nimport throttle from \"lodash.throttle\";\nimport { saveAs } from \"file-saver\";\n\nexport default function App() {\n  const inputRef = useRef(null);\n  const [progress, setProgress] = useState(-1);\n  const [files, setFiles] = useState([]);\n\n  const onZipUpdate = (metadata) => {\n    setProgress(metadata.percent);\n    console.log(\"progression: \" + metadata.percent.toFixed(2) + \" %\");\n    if (metadata.currentFile) {\n      console.log(\"current file = \" + metadata.currentFile);\n    }\n  };\n  const throttledZipUpdate = throttle(onZipUpdate, 50);\n\n  const onZip = () => {\n    const zip = new JSZip();\n    const files = Array.from(inputRef.current.files);\n\n    files.forEach((file) => {\n      zip.file(file.webkitRelativePath, file);\n    });\n    zip\n      .generateAsync({ type: \"blob\" }, throttledZipUpdate)\n      .then(function (content) {\n        saveAs(content, \"files.zip\");\n\n        const formData = new FormData();\n        formData.append(\"folderzip\", content);\n        console.log(\"ready to send to server\", content);\n      })\n      .catch((e) => console.log(e));\n  };\n  return (\n    <div className=\"App\">\n      <h1>Folder upload</h1>\n      <h2>Select a folder to send to the server</h2>\n      <input ref={inputRef} type=\"file\" webkitdirectory=\"true\" />\n      {files.length && (\n        <div>\n          <div>\n            <button onClick={onZip}>zip {files.length} files</button>\n          </div>\n          <progress max=\"100\" value={progress}>\n            {progress?.toFixed(2)}%{\" \"}\n          </progress>\n          <h3>Selected Files</h3>\n          {files.map((file) => (\n            <div key={file.webkitRelativePath}>{file.webkitRelativePath}</div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}